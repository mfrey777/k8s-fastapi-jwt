FROM node:lts

# you'll likely want the latest npm, regardless of node version, for speed and fixes
# but pin this version for the best stability
RUN npm i npm@latest -g

# install dependencies first, in a different location for easier app bind mounting for local development
# due to default /opt permissions we have to create the dir with root and change perms
RUN mkdir /app && chown node:node /app
WORKDIR /app

# the official node image provides an unprivileged user as a security best practice
# but we have to manually enable it. We put it here so npm installs dependencies as the same
# user who runs the app. 
# https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md#non-root-user
USER node
COPY ./package.json package-lock.json* ./
COPY ./patch/* ./patch/
RUN npm install --no-optional && npm cache clean --force
ENV PATH /app/node_modules/.bin:$PATH

# check every 30s to ensure this service returns HTTP 200
HEALTHCHECK --interval=30s CMD node healthcheck.js

# WORKDIR '/app'
# COPY ./package.json ./
# RUN npm install --unsafe-perm

COPY --chown=node:node ./ ./

CMD ["npm", "run", "start"]


# # copy in our source code last, as it changes the most
# WORKDIR /opt/node_app/app
# COPY . .

# COPY docker-entrypoint.sh /usr/local/bin/
# ENTRYPOINT ["docker-entrypoint.sh"]


# # if you want to use npm start instead, then use `docker run --init in production`
# # so that signals are passed properly. Note the code in index.js is needed to catch Docker signals
# # using node here is still more graceful stopping then npm with --init afaik
# # I still can't come up with a good production way to run with npm and graceful shutdown
# CMD [ "node", "./bin/www" ]