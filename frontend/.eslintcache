[{"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\index.tsx":"1","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\reportWebVitals.ts":"2","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\App.tsx":"3","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\i18n.ts":"4","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\store.ts":"5","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\root.saga.ts":"6","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\root.reducer.ts":"7","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\user\\user.selectors.ts":"8","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\tenant\\tenant.slice.ts":"9","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\user\\user.actions.ts":"10","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal\\modal.actions.ts":"11","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\home\\home.tsx":"12","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\test\\test.tsx":"13","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\reset-password\\reset-password.component.tsx":"14","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\sign-in\\sign-in.component.tsx":"15","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\logout\\logout.tsx":"16","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\navbar\\Navbar.tsx":"17","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-dialog\\modal-manager.components.tsx":"18","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\report\\report.component.tsx":"19","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\idle-timeout-modal\\IdelTimeoutModal.tsx":"20","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-confirm-dialog\\modal-confirm-manager.components.tsx":"21","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\private-route\\PrivateRoute.tsx":"22","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\create-tenant-page\\create-tenant-page.tsx":"23","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\initialize-system\\initialize-system.tsx":"24","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\select-tenant\\select-tenant.tsx":"25","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\features\\modal-blocking\\modal-blocking-manager.components.tsx":"26","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\user\\user.sagas.ts":"27","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal\\modal.reducer.ts":"28","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\tenant\\tenant.sagas.ts":"29","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\user\\user.reducer.ts":"30","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\features\\modal-blocking\\modal-blocking.slice.ts":"31","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\general\\general.slice.ts":"32","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\general\\general.sagas.ts":"33","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\currency-conversion\\currency-conversion.sagas.ts":"34","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\report\\report.sagas.ts":"35","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\currency-conversion\\currency-conversion.reducer.ts":"36","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\report\\report.reducer.ts":"37","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\cash-flow\\cash-flow.sagas.ts":"38","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\cash-flow\\cash-flow.reducer.ts":"39","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal-confirm\\modal-confirm.reducer.ts":"40","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\user\\user.types.ts":"41","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal\\modal.types.ts":"42","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\tenant\\tenant.selectors.ts":"43","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\general\\general.selectors.ts":"44","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\features\\modal-blocking\\modal-blocking.selectors.ts":"45","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal-confirm\\modal-confirm.selectors.ts":"46","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\report\\report.selectors.ts":"47","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal\\modal.selectors.ts":"48","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\report\\report.actions.ts":"49","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\features\\modal-blocking\\modal-blocking-dialog.components.tsx":"50","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-confirm-dialog\\modal-confirm-dialog.components.tsx":"51","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-dialog\\modal-dialog-standard.components.tsx":"52","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-dialog\\modal-dialog-simple.components.tsx":"53","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-dialog\\modal-dialog-info.components.tsx":"54","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\navbar\\RightMenu.tsx":"55","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\navbar\\LeftMenu.tsx":"56","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\test-form\\test-form.components.tsx":"57","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\reset-password\\reset-password.component.tsx":"58","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\templates\\template-class-connected-props.components.tsx":"59","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\sign-in\\sign-in.components.tsx":"60","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\create-tenant\\create-tenant.component.tsx":"61","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\dropdown-container\\dropdown-container.component.tsx":"62","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\features\\modal-blocking\\modal-blocking.sagas.ts":"63","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal-confirm\\modal-confirm-sagas.ts":"64","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\utils\\utils.ts":"65","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\utils\\api.ts":"66","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal-confirm\\modal-confirm.types.ts":"67","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\cash-flow\\cash-flow.types.ts":"68","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\cash-flow\\cash-flow.actions.ts":"69","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\report\\report.types.ts":"70","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\currency-conversion\\currency-conversion.types.ts":"71","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\currency-conversion\\currency-conversion.actions.ts":"72","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal-confirm\\modal-confirm.actions.ts":"73"},{"size":1166,"mtime":1609105734877,"results":"74","hashOfConfig":"75"},{"size":425,"mtime":1606116300121,"results":"76","hashOfConfig":"77"},{"size":7349,"mtime":1609106466438,"results":"78","hashOfConfig":"75"},{"size":1395,"mtime":1609104890033,"results":"79","hashOfConfig":"75"},{"size":1417,"mtime":1609104324660,"results":"80","hashOfConfig":"75"},{"size":1689,"mtime":1609104324659,"results":"81","hashOfConfig":"75"},{"size":1084,"mtime":1609104324658,"results":"82","hashOfConfig":"75"},{"size":772,"mtime":1609104324669,"results":"83","hashOfConfig":"75"},{"size":3304,"mtime":1609106338330,"results":"84","hashOfConfig":"75"},{"size":4432,"mtime":1609104324665,"results":"85","hashOfConfig":"75"},{"size":346,"mtime":1609104324643,"results":"86","hashOfConfig":"75"},{"size":3927,"mtime":1609104324507,"results":"87","hashOfConfig":"75"},{"size":700,"mtime":1609106182594,"results":"88","hashOfConfig":"75"},{"size":1661,"mtime":1609104324598,"results":"89","hashOfConfig":"75"},{"size":1280,"mtime":1609104324599,"results":"90","hashOfConfig":"75"},{"size":464,"mtime":1609104324508,"results":"91","hashOfConfig":"75"},{"size":1732,"mtime":1609106041257,"results":"92","hashOfConfig":"75"},{"size":1085,"mtime":1609106063452,"results":"93","hashOfConfig":"75"},{"size":8010,"mtime":1609186360099,"results":"94","hashOfConfig":"75"},{"size":862,"mtime":1609104324413,"results":"95","hashOfConfig":"75"},{"size":722,"mtime":1609106003524,"results":"96","hashOfConfig":"75"},{"size":2020,"mtime":1609106079527,"results":"97","hashOfConfig":"75"},{"size":347,"mtime":1609106317735,"results":"98","hashOfConfig":"75"},{"size":2005,"mtime":1609185795285,"results":"99","hashOfConfig":"75"},{"size":2344,"mtime":1609106088038,"results":"100","hashOfConfig":"75"},{"size":808,"mtime":1609106304975,"results":"101","hashOfConfig":"75"},{"size":10712,"mtime":1609104324668,"results":"102","hashOfConfig":"75"},{"size":923,"mtime":1609104324644,"results":"103","hashOfConfig":"75"},{"size":7581,"mtime":1609104324662,"results":"104","hashOfConfig":"75"},{"size":3639,"mtime":1609104324667,"results":"105","hashOfConfig":"75"},{"size":998,"mtime":1609104324482,"results":"106","hashOfConfig":"75"},{"size":2869,"mtime":1609104324642,"results":"107","hashOfConfig":"75"},{"size":5239,"mtime":1609104324640,"results":"108","hashOfConfig":"75"},{"size":1473,"mtime":1609104324637,"results":"109","hashOfConfig":"75"},{"size":1196,"mtime":1609104324656,"results":"110","hashOfConfig":"75"},{"size":2360,"mtime":1609104324635,"results":"111","hashOfConfig":"75"},{"size":1359,"mtime":1609187663849,"results":"112","hashOfConfig":"75"},{"size":2471,"mtime":1609104324631,"results":"113","hashOfConfig":"75"},{"size":1436,"mtime":1609186831096,"results":"114","hashOfConfig":"75"},{"size":634,"mtime":1609104324651,"results":"115","hashOfConfig":"75"},{"size":5878,"mtime":1609104324670,"results":"116","hashOfConfig":"75"},{"size":1031,"mtime":1609104324647,"results":"117","hashOfConfig":"75"},{"size":714,"mtime":1609104324662,"results":"118","hashOfConfig":"75"},{"size":746,"mtime":1609104324641,"results":"119","hashOfConfig":"75"},{"size":545,"mtime":1609104324481,"results":"120","hashOfConfig":"75"},{"size":533,"mtime":1609104324652,"results":"121","hashOfConfig":"75"},{"size":725,"mtime":1609104324657,"results":"122","hashOfConfig":"75"},{"size":574,"mtime":1609104324645,"results":"123","hashOfConfig":"75"},{"size":888,"mtime":1609104324654,"results":"124","hashOfConfig":"75"},{"size":1004,"mtime":1609104324478,"results":"125","hashOfConfig":"75"},{"size":853,"mtime":1609104324423,"results":"126","hashOfConfig":"75"},{"size":942,"mtime":1609104324428,"results":"127","hashOfConfig":"75"},{"size":932,"mtime":1609104324427,"results":"128","hashOfConfig":"75"},{"size":822,"mtime":1609104324426,"results":"129","hashOfConfig":"75"},{"size":2355,"mtime":1609106025888,"results":"130","hashOfConfig":"75"},{"size":1834,"mtime":1609106019217,"results":"131","hashOfConfig":"75"},{"size":2783,"mtime":1609106136752,"results":"132","hashOfConfig":"75"},{"size":2375,"mtime":1609185833802,"results":"133","hashOfConfig":"75"},{"size":3673,"mtime":1609106250482,"results":"134","hashOfConfig":"75"},{"size":2275,"mtime":1609185901536,"results":"135","hashOfConfig":"75"},{"size":2215,"mtime":1609105860847,"results":"136","hashOfConfig":"75"},{"size":1484,"mtime":1609185706821,"results":"137","hashOfConfig":"75"},{"size":1160,"mtime":1609104324480,"results":"138","hashOfConfig":"75"},{"size":1364,"mtime":1609104324649,"results":"139","hashOfConfig":"75"},{"size":790,"mtime":1609104324749,"results":"140","hashOfConfig":"75"},{"size":3315,"mtime":1609104324746,"results":"141","hashOfConfig":"75"},{"size":826,"mtime":1609104324653,"results":"142","hashOfConfig":"75"},{"size":1447,"mtime":1609186818072,"results":"143","hashOfConfig":"75"},{"size":981,"mtime":1609104324629,"results":"144","hashOfConfig":"75"},{"size":1332,"mtime":1609187681215,"results":"145","hashOfConfig":"75"},{"size":2012,"mtime":1609104324639,"results":"146","hashOfConfig":"75"},{"size":1331,"mtime":1609104324634,"results":"147","hashOfConfig":"75"},{"size":600,"mtime":1609104324650,"results":"148","hashOfConfig":"75"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},"5qg7lo",{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kd9lez",{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"151"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"151"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"151"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"151"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"151"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"151"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"151"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"151"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"151"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"151"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"151"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\index.tsx",[],[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\reportWebVitals.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\App.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\i18n.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\store.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\root.saga.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\root.reducer.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\user\\user.selectors.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\tenant\\tenant.slice.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\user\\user.actions.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal\\modal.actions.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\home\\home.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\test\\test.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\reset-password\\reset-password.component.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\sign-in\\sign-in.component.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\logout\\logout.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\navbar\\Navbar.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-dialog\\modal-manager.components.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\report\\report.component.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\idle-timeout-modal\\IdelTimeoutModal.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-confirm-dialog\\modal-confirm-manager.components.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\private-route\\PrivateRoute.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\pages\\create-tenant-page\\create-tenant-page.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\initialize-system\\initialize-system.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\select-tenant\\select-tenant.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\features\\modal-blocking\\modal-blocking-manager.components.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\user\\user.sagas.ts",["308","309","310","311"],"import {\r\n  takeLatest,\r\n  put,\r\n  call,\r\n  select,\r\n  PutEffect,\r\n  CallEffect,\r\n  ForkEffect,\r\n  SelectEffect,\r\n} from 'redux-saga/effects';\r\nimport {\r\n  UserActionTypes,\r\n  UserLoginInfo,\r\n  UserTenantEmail,\r\n  UserNewPassword,\r\n  UserLanguage,\r\n  TenantInfo,\r\n  // RefreshTokenFailure,\r\n  UserSuccessMessage,\r\n} from './user.types';\r\nimport {\r\n  loginUserSuccess,\r\n  loginUserFailure,\r\n  resetPasswordSuccess,\r\n  resetPasswordFailure,\r\n  setNewPasswordSuccess,\r\n  setNewPasswordFailure,\r\n  registerUserSuccess,\r\n  registerUserFailure,\r\n  checkUserTenantFailure,\r\n} from './user.actions';\r\nimport { openModal } from '../modal/modal.actions';\r\n\r\nimport { api_refresh } from '../../utils/api';\r\nimport { history } from '../../index';\r\n\r\nimport i18n from '../../i18n';\r\nimport { selectCurrentTenant } from './user.selectors';\r\n\r\n// export function* signUpWithEmail(payload: { tenant; email; password }) {\r\nexport function* signUpWithEmail({\r\n  payload,\r\n}: {\r\n  type: typeof UserActionTypes.REGISTER_USER_REQUEST;\r\n  payload: UserLoginInfo;\r\n}): Generator<PutEffect | CallEffect, void, unknown> {\r\n  // yield console.log('emailSignInStart saga triggered');\r\n  // yield console.log('username: ' + email);\r\n  // yield console.log('password: ' + password);\r\n\r\n  console.log('sign up saga started');\r\n  try {\r\n    const { tenant, email, password } = payload;\r\n\r\n    // perform login\r\n    // const response: ReturnType<typeof api_refresh.post> = yield call(\r\n    const response: any = yield call(\r\n      api_refresh.post,\r\n      '/api/auth/register-user',\r\n      {\r\n        username: email,\r\n        password: password,\r\n      }\r\n    );\r\n    const data = response.data;\r\n\r\n    const msg = data['msg'];\r\n    console.log(msg);\r\n\r\n    if (msg) {\r\n      yield put(registerUserSuccess({ msg: msg, tenant: tenant }));\r\n    } else {\r\n      yield put(registerUserFailure({ error: data['msg'] }));\r\n    }\r\n  } catch (error) {\r\n    yield put(registerUserFailure(error));\r\n  }\r\n  console.log('sign up saga finished');\r\n  // yield console.log('userLoginStart Saga fired');\r\n}\r\n\r\nexport function* signInWithEmail({\r\n  payload,\r\n}: {\r\n  type: typeof UserActionTypes.LOGIN_USER_REQUEST;\r\n  payload: UserLoginInfo;\r\n}): Generator<PutEffect | CallEffect | void, void, unknown> {\r\n  // yield console.log('emailSignInStart saga triggered');\r\n\r\n  console.log('login call started');\r\n  try {\r\n    // const { tenant, email, password } = payload;\r\n    const { email, password } = payload;\r\n    // console.log('signInWithEmail saga - tenant: ' + tenant);\r\n    // console.log('signInWithEmail saga - email: ' + email);\r\n    // console.log('signInWithEmail saga - password: ' + password);\r\n    // perform login\r\n    const response: any = yield call(api_refresh.post, '/api/auth/login', {\r\n      username: email,\r\n      password: password,\r\n    });\r\n    const data = response.data;\r\n\r\n    const accessToken = data['access_token'];\r\n    const refreshToken = data['refresh_token'];\r\n    const tenant = data['tenant'];\r\n    console.log(data);\r\n\r\n    if (accessToken) {\r\n      yield put(\r\n        loginUserSuccess({\r\n          email: email,\r\n          accessToken: accessToken,\r\n          refreshToken: refreshToken,\r\n          tenant: tenant,\r\n        })\r\n      );\r\n      // yield history.push('/');\r\n    } else {\r\n      yield put(loginUserFailure({ error: data['msg'] }));\r\n    }\r\n  } catch (error) {\r\n    yield put(loginUserFailure(error));\r\n  }\r\n  // yield console.log('userLoginStart Saga fired');\r\n}\r\n\r\n// export function* resetPassword({ payload: { tenant, email } }) {\r\nexport function* resetPassword({\r\n  payload,\r\n}: {\r\n  type: typeof UserActionTypes.RESET_PASSWORD_REQUEST;\r\n  payload: UserTenantEmail;\r\n}): Generator<PutEffect | CallEffect, void, unknown> {\r\n  console.log('password reset saga started');\r\n  try {\r\n    const { tenant, email } = payload;\r\n    console.log('reset password - tenant: ' + tenant);\r\n    console.log('reset password - email: ' + email);\r\n    //initiate password reset process\r\n    // const response = yield fetch('/api/auth/reset-password',{\r\n    //     method: 'post',\r\n    //     headers: {'Content-Type':'application/json'},\r\n    //     body: JSON.stringify({\r\n    //         username: email,\r\n    //     })\r\n    // });\r\n\r\n    const response: any = yield call(\r\n      api_refresh.post,\r\n      '/api/auth/reset-password',\r\n      {\r\n        username: email,\r\n      }\r\n    );\r\n\r\n    console.log(response);\r\n    // const data = response.data\r\n\r\n    // yield console.log(response);\r\n    // const data = yield response.json();\r\n    // const accessToken = data['access_token'];\r\n    // const refreshToken = data['refresh_token'];\r\n    // console.log('access token: ' + accessToken);\r\n\r\n    const a = 1;\r\n    if (a === 1) {\r\n      yield put(resetPasswordSuccess({ msg: 'success', tenant: tenant }));\r\n    } else {\r\n      yield put(resetPasswordFailure({ error: 'error' }));\r\n    }\r\n  } catch (error) {\r\n    yield put(resetPasswordFailure(error));\r\n  }\r\n  console.log('userLoginStart Saga fired');\r\n}\r\n\r\n// export function* setNewPassword({ payload: { tenant, email, password, code } }) {\r\nexport function* setNewPassword({\r\n  payload,\r\n}: {\r\n  type: typeof UserActionTypes.SET_NEW_PASSWORD_REQUEST;\r\n  payload: UserNewPassword;\r\n}): Generator<PutEffect | CallEffect, void, unknown> {\r\n  console.log('set new password saga started');\r\n  try {\r\n    const { tenant, email, password, code } = payload;\r\n    console.log(email, password, code);\r\n    //initiate password reset process\r\n    // const response = yield fetch('/api/auth/set-new-password',{\r\n    //     method: 'post',\r\n    //     headers: {'Content-Type':'application/json'},\r\n    //     body: JSON.stringify({\r\n    //         username: email,\r\n    //         password: password,\r\n    //         code: code\r\n    //     })\r\n    // });\r\n    // yield console.log(response);\r\n    // const data = yield response.json();\r\n\r\n    const response: any = yield call(\r\n      api_refresh.post,\r\n      '/api/auth/set-new-password',\r\n      {\r\n        username: email,\r\n        password: password,\r\n        code: code,\r\n      }\r\n    );\r\n    const data = response.data;\r\n\r\n    console.log(data);\r\n    // const accessToken = data['access_token'];\r\n    // const refreshToken = data['refresh_token'];\r\n    // console.log('access token: ' + accessToken);\r\n\r\n    const a = 1;\r\n    if (a === 1) {\r\n      yield put(setNewPasswordSuccess({ msg: 'success', tenant: tenant }));\r\n    } else {\r\n      yield put(setNewPasswordFailure({ error: 'error' }));\r\n    }\r\n  } catch (error) {\r\n    yield put(setNewPasswordFailure(error));\r\n  }\r\n  console.log('userLoginStart Saga fired');\r\n}\r\n\r\nexport function* setNewPasswordSuccessSaga({\r\n  payload,\r\n}: {\r\n  type: typeof UserActionTypes.SET_NEW_PASSWORD_SUCCESS;\r\n  payload: UserSuccessMessage;\r\n}): Generator<PutEffect | CallEffect, void, unknown> {\r\n  console.log('create tenant success saga started');\r\n\r\n  const { msg } = payload;\r\n  yield put(\r\n    openModal({\r\n      modalProps: { title: 'User successfully activated' },\r\n      modalType: 'ModalDialogInfo',\r\n      modalContent: msg,\r\n    })\r\n  );\r\n  history.push('/login/');\r\n\r\n  console.log('create tenant success saga finished');\r\n}\r\n\r\n// export function* setNewPassword({ payload: { tenant, email, password, code } }) {\r\nexport function* selectLanguageSaga({\r\n  payload,\r\n}: {\r\n  type: typeof UserActionTypes.SET_LANGUAGE;\r\n  payload: UserLanguage;\r\n}): Generator<void, void, unknown> {\r\n  yield console.log('selectLanguage saga started');\r\n  try {\r\n    const { language } = payload;\r\n    i18n.changeLanguage(language);\r\n    console.log('selectLanguage Saga language: ', language);\r\n  } catch (error) {\r\n    console.log('selectLanguage error');\r\n  }\r\n  console.log('selectLanguage Saga finished');\r\n}\r\n\r\nexport function* checkUserTenantSaga({\r\n  payload,\r\n}: {\r\n  type: typeof UserActionTypes.CHECK_USER_TENANT_REQUEST;\r\n  payload: TenantInfo;\r\n}): Generator<SelectEffect | PutEffect, void, unknown> {\r\n  console.log('checkUserTenantSaga started');\r\n  try {\r\n    const { tenant } = payload;\r\n    const user_tenant = yield select(selectCurrentTenant);\r\n    console.log(tenant + ' === ' + user_tenant);\r\n    if (tenant === user_tenant) {\r\n      console.log('checkUserTenantSaga success');\r\n    } else {\r\n      console.log('checkUserTenantSaga failed');\r\n      yield put(checkUserTenantFailure({ error: 'error' }));\r\n    }\r\n  } catch (error) {\r\n    console.log('checkUserTenantSaga error');\r\n  }\r\n}\r\n\r\nexport function* logoutUserSaga(): Generator<void, void, unknown> {\r\n  console.log('logoutUserStart started');\r\n  try {\r\n    // const { tenant } = payload;\r\n    yield history.push('/');\r\n    console.log('logoutUserStart finshed');\r\n  } catch (error) {\r\n    console.log('logoutUserStart error');\r\n  }\r\n}\r\n\r\nexport function* loginUserRedirectSage(): Generator<void, void, unknown> {\r\n  // {\r\n  // payload,\r\n  // }: {\r\n  // type: typeof UserActionTypes.LOGIN_USER_SUCCESS;\r\n  // payload: RefreshTokenFailure;\r\n  // }\r\n  console.log('loginUserRedirectSage started');\r\n  try {\r\n    // const { tenant } = payload;\r\n    yield history.push('/');\r\n    console.log('loginUserRedirectSage finshed');\r\n  } catch (error) {\r\n    console.log('loginUserRedirectSage error');\r\n  }\r\n}\r\n\r\nexport function* emailSignUpStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(UserActionTypes.REGISTER_USER_REQUEST, signUpWithEmail);\r\n}\r\n\r\nexport function* emailSignInStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(UserActionTypes.LOGIN_USER_REQUEST, signInWithEmail);\r\n}\r\n\r\nexport function* resetPasswordStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(UserActionTypes.RESET_PASSWORD_REQUEST, resetPassword);\r\n}\r\n\r\nexport function* setNewPasswordStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(UserActionTypes.SET_NEW_PASSWORD_REQUEST, setNewPassword);\r\n}\r\n\r\nexport function* setNewPasswordSuccessStart(): Generator<\r\n  ForkEffect,\r\n  void,\r\n  unknown\r\n> {\r\n  yield takeLatest(\r\n    UserActionTypes.SET_NEW_PASSWORD_SUCCESS,\r\n    setNewPasswordSuccessSaga\r\n  );\r\n}\r\n\r\nexport function* selectLanguageStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(UserActionTypes.SET_LANGUAGE, selectLanguageSaga);\r\n}\r\n\r\nexport function* checkUserTenantStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(\r\n    UserActionTypes.CHECK_USER_TENANT_REQUEST,\r\n    checkUserTenantSaga\r\n  );\r\n}\r\n\r\nexport function* logoutUserStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(UserActionTypes.LOGOUT_USER, logoutUserSaga);\r\n}\r\n\r\nexport function* loginUserRedirectStart(): Generator<\r\n  ForkEffect,\r\n  void,\r\n  unknown\r\n> {\r\n  yield takeLatest(UserActionTypes.LOGIN_USER_SUCCESS, loginUserRedirectSage);\r\n}\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal\\modal.reducer.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\tenant\\tenant.sagas.ts",["312","313","314","315"],"import {\r\n  takeLatest,\r\n  put,\r\n  call,\r\n  PutEffect,\r\n  CallEffect,\r\n  ForkEffect,\r\n} from 'redux-saga/effects';\r\nimport {\r\n  createTenantRequest,\r\n  createTenantSuccess,\r\n  createTenantFailure,\r\n  createGlobalTenantRequest,\r\n  createGlobalTenantSuccess,\r\n  createGlobalTenantFailure,\r\n  deleteTenantRequest,\r\n  deleteTenantSuccess,\r\n  deleteTenantFailure,\r\n  checkTenantRequest,\r\n  checkTenantSuccess,\r\n  checkTenantFailure,\r\n  checkGlobalTenantSuccess,\r\n  checkGlobalTenantFailure,\r\n} from './tenant.slice';\r\nimport { openModal } from '../modal/modal.actions';\r\n\r\nimport { checkUserTenantRequest } from '../user/user.actions';\r\n\r\nimport { api_refresh } from '../../utils/api';\r\n\r\nimport { history } from '../../index';\r\nimport { confirmSaga } from '../modal-confirm/modal-confirm-sagas';\r\nimport { modalBlockingSaga } from '../../features/modal-blocking/modal-blocking.sagas';\r\nimport { redirectSubdomain } from '../../utils/utils';\r\n\r\n// export const redirectToSubdomain = () =>\r\n//   (window.location.href = 'https://www.google.com');\r\n\r\nexport function* createTenant(\r\n  action: ReturnType<typeof createTenantRequest>\r\n): Generator<PutEffect | CallEffect, void, unknown> {\r\n  // yield console.log('emailSignInStart saga triggered');\r\n  // yield console.log('username: ' + email);\r\n  // yield console.log('password: ' + password);\r\n\r\n  console.log('create tenant saga started');\r\n  try {\r\n    const isConfirm = yield call(confirmSaga, {\r\n      modalType: 'confirm',\r\n      modalTitle: 'Tenant creation',\r\n      modalText: 'Please confirm tenant creation',\r\n    });\r\n\r\n    if (isConfirm) {\r\n      // const { tenant_id, tenant_desc, email, password } = payload;\r\n      const { tenant_id, tenant_desc, email } = action.payload;\r\n\r\n      // perform login\r\n      const response: any = yield call(\r\n        api_refresh.post,\r\n        '/api/admin/create-tenant',\r\n        {\r\n          tenant_id: tenant_id,\r\n          tenant_desc: tenant_desc,\r\n          email: email,\r\n          // password: password,\r\n        }\r\n      );\r\n      const data = response.data;\r\n\r\n      const msg = data['msg'];\r\n      console.log(msg);\r\n\r\n      if (msg) {\r\n        yield put(createTenantSuccess({ message: msg }));\r\n        yield put(\r\n          openModal({\r\n            modalProps: { title: 'Success' },\r\n            modalType: 'ModalDialogInfo',\r\n            modalContent: msg,\r\n          })\r\n        );\r\n        history.push('/');\r\n      } else {\r\n        yield put(createTenantFailure({ message: data['msg'] }));\r\n      }\r\n    }\r\n  } catch (error) {\r\n    yield put(createTenantFailure(error));\r\n  }\r\n  console.log('create tenant saga finished');\r\n}\r\n\r\nexport function* createGlobalTenant(\r\n  action: ReturnType<typeof createGlobalTenantRequest>\r\n): Generator<PutEffect | CallEffect, void, unknown> {\r\n  // yield console.log('emailSignInStart saga triggered');\r\n  // yield console.log('username: ' + email);\r\n  // yield console.log('password: ' + password);\r\n\r\n  console.log('create global tenant saga started');\r\n  try {\r\n    const isConfirm = yield call(confirmSaga, {\r\n      modalType: 'confirm',\r\n      modalTitle: 'Tenant creation',\r\n      modalText: 'Please confirm global tenant creation',\r\n    });\r\n\r\n    if (isConfirm) {\r\n      // const { tenant_id, tenant_desc, email, password } = payload;\r\n      const { password, email } = action.payload;\r\n\r\n      // perform login\r\n      const response: any = yield call(\r\n        api_refresh.post,\r\n        '/api/admin/create-global-tenant',\r\n        {\r\n          password: password,\r\n          email: email,\r\n        }\r\n      );\r\n      const data = response.data;\r\n\r\n      const msg = data['msg'];\r\n      console.log(msg);\r\n\r\n      if (msg) {\r\n        yield put(createGlobalTenantSuccess({ message: msg }));\r\n        yield put(\r\n          openModal({\r\n            modalProps: { title: 'Success' },\r\n            modalType: 'ModalDialogInfo',\r\n            modalContent: msg,\r\n          })\r\n        );\r\n        // history.push('/global/');\r\n        yield call(redirectSubdomain, 'global');\r\n      } else {\r\n        yield put(createGlobalTenantFailure({ message: data['msg'] }));\r\n      }\r\n    }\r\n  } catch (error) {\r\n    yield put(createGlobalTenantFailure(error));\r\n  }\r\n  console.log('create global tenant saga finished');\r\n}\r\n\r\nexport function* deleteTenant(\r\n  action: ReturnType<typeof deleteTenantRequest>\r\n): Generator<PutEffect | CallEffect, void, unknown> {\r\n  console.log('delete tenant saga started');\r\n  try {\r\n    const { tenant_id } = action.payload;\r\n\r\n    // perform login\r\n    const response: any = yield call(\r\n      api_refresh.post,\r\n      '/api/auth/delete-tenant',\r\n      {\r\n        tenant_id: tenant_id,\r\n      }\r\n    );\r\n    const data = response.data;\r\n\r\n    const msg = data['msg'];\r\n    console.log(msg);\r\n\r\n    if (msg) {\r\n      yield put(deleteTenantSuccess({ message: msg }));\r\n    } else {\r\n      yield put(deleteTenantFailure({ message: data['msg'] }));\r\n    }\r\n  } catch (error) {\r\n    yield put(deleteTenantFailure(error));\r\n  }\r\n  console.log('delete tenant saga finished');\r\n}\r\n\r\nexport function* checkTenant(\r\n  action: ReturnType<typeof checkTenantRequest>\r\n): Generator<PutEffect | CallEffect, void, unknown> {\r\n  // console.log('check tenant saga started');\r\n  try {\r\n    const { tenant_id } = action.payload;\r\n\r\n    // perform login\r\n    const response: any = yield call(\r\n      api_refresh.post,\r\n      '/api/admin/check-tenant-exists',\r\n      {\r\n        tenant_id: tenant_id,\r\n      }\r\n    );\r\n    const data = response.data;\r\n\r\n    const tenant_exists = data['tenant_exists'];\r\n    const global_tenant_exists = data['global_tenant_exists'];\r\n    // console.log(msg);\r\n\r\n    if (tenant_exists) {\r\n      yield put(checkTenantSuccess({ tenant_id: tenant_id, status: 'true' }));\r\n      yield put(checkUserTenantRequest({ tenant: tenant_id }));\r\n    } else {\r\n      if (global_tenant_exists) {\r\n        yield put(checkGlobalTenantSuccess());\r\n        // history.push('https://www.google.com');\r\n        const isConfirm = yield call(modalBlockingSaga, {\r\n          modalType: 'blocking',\r\n          modalTitle: 'Tenant does not exist',\r\n          modalText:\r\n            'This tenant does not exist, you will be forwarded to the main page',\r\n        });\r\n        if (isConfirm) {\r\n          yield call(redirectSubdomain, 'app', '/select-tenant');\r\n        }\r\n      } else {\r\n        yield put(checkGlobalTenantFailure());\r\n        const isConfirm = yield call(modalBlockingSaga, {\r\n          modalType: 'blocking',\r\n          modalTitle: 'System has not been initialized',\r\n          modalText:\r\n            'This System has not been initialized, please contact your administrator',\r\n        });\r\n        if (isConfirm) {\r\n          yield call(redirectSubdomain, 'app', '/initialize-system');\r\n        }\r\n      }\r\n      // history.push('/');\r\n      // yield put(push('/missing'));\r\n    }\r\n  } catch (error) {\r\n    yield put(checkTenantFailure(error));\r\n  }\r\n  // console.log('check tenant saga finished');\r\n}\r\n\r\nexport function* createTenantStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(createTenantRequest.type, createTenant);\r\n}\r\n\r\nexport function* createGlobalTenantStart(): Generator<\r\n  ForkEffect,\r\n  void,\r\n  unknown\r\n> {\r\n  yield takeLatest(createGlobalTenantRequest.type, createGlobalTenant);\r\n}\r\n\r\nexport function* deleteTenantStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(deleteTenantRequest.type, deleteTenant);\r\n}\r\n\r\nexport function* checkTenantStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(checkTenantRequest.type, checkTenant);\r\n}\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\user\\user.reducer.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\features\\modal-blocking\\modal-blocking.slice.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\general\\general.slice.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\general\\general.sagas.ts",["316","317","318","319"],"import {\r\n  takeLatest,\r\n  put,\r\n  call,\r\n  ForkEffect,\r\n  CallEffect,\r\n  PutEffect,\r\n} from 'redux-saga/effects';\r\n\r\nimport {\r\n  protectedApiStart,\r\n  protectedApiSuccess,\r\n  protectedApiFailure,\r\n  publicApiStart,\r\n  publicApiSuccess,\r\n  publicApiFailure,\r\n  protectedApiCheckProfileStart,\r\n  protectedApiCheckProfileFailure,\r\n  protectedApiCheckProfileSuccess,\r\n  echoApiStart,\r\n  echoApiSuccess,\r\n  echoApiFailure,\r\n} from './general.slice';\r\n\r\nimport { api } from '../../utils/api';\r\n\r\nexport function* getProtectedApi(): Generator<\r\n  // action: ReturnType<typeof protectedApiStart>\r\n  ForkEffect | CallEffect | PutEffect,\r\n  void,\r\n  unknown\r\n> {\r\n  // console.log('getProtectedApi saga started');\r\n  // console.log('action: ');\r\n  // console.log(action);\r\n\r\n  try {\r\n    // const { tenant } = action.payload;\r\n    // console.log('getProtectedApi() saga 1');\r\n    const data: any = yield call(api.get, '/api/test/protected');\r\n    // const data: any = yield call(api.get, '/' + tenant + '/api/test/protected');\r\n    // const data: any = yield call(generalApi.getPublicMessage);\r\n    // console.log('getProtectedApi() saga 2');\r\n    // console.log('data:');\r\n    // console.log(typeof data);\r\n    // console.log(data);\r\n    const json = data.data;\r\n    if (data && !data.err && data.status === 200) {\r\n      // if (data) {\r\n      yield put(protectedApiSuccess(json));\r\n    } else {\r\n      yield put(protectedApiFailure(json));\r\n    }\r\n  } catch (err) {\r\n    console.log('error occured');\r\n  }\r\n}\r\n\r\nexport function* getProtectedApiCheckProfile(\r\n  action: ReturnType<typeof protectedApiCheckProfileStart>\r\n): Generator<ForkEffect | CallEffect | PutEffect, void, unknown> {\r\n  console.log('getProtectedApiCheckProfile saga started');\r\n  console.log('action: ');\r\n  console.log(action);\r\n\r\n  try {\r\n    // const { tenant } = action.payload;\r\n    // console.log('getProtectedApi() saga 1');\r\n    const data: any = yield call(\r\n      api.get,\r\n      // '/' + tenant + '/api/test/protected-check-profile'\r\n      '/api/test/protected-check-profile'\r\n    );\r\n    // const data: any = yield call(generalApi.getPublicMessage);\r\n    // console.log('getProtectedApi() saga 2');\r\n    // console.log('data:');\r\n    // console.log(typeof data);\r\n    // console.log(data);\r\n    const json = data.data;\r\n    if (data && !data.err && data.status === 200) {\r\n      // if (data) {\r\n      yield put(protectedApiCheckProfileSuccess(json));\r\n    } else {\r\n      yield put(protectedApiCheckProfileFailure(json));\r\n      // console.log('protectedApiCheckProfileFailure: ');\r\n      // console.log(json);\r\n    }\r\n  } catch (err) {\r\n    console.log('error occured');\r\n    const { tenant } = action.payload;\r\n    yield put(\r\n      protectedApiCheckProfileFailure({\r\n        msg: 'api called failed',\r\n        user: '',\r\n        tenant: tenant,\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport function* getPublicApi(): Generator<\r\n  CallEffect | PutEffect,\r\n  void,\r\n  unknown\r\n> {\r\n  // console.log('getPublicApi saga started');\r\n  // console.log('action: ');\r\n  // console.log(action);\r\n\r\n  try {\r\n    // const data = yield call(api.get, '/api/test/public');\r\n    // console.log('getPublicApi() saga 1');\r\n\r\n    // const data: any = yield call(generalApi.getPublicMessage);\r\n    // console.log('getPublicApi() saga 2');\r\n    // console.log('data:');\r\n    // console.log(typeof data);\r\n    // console.log(data);\r\n    // console.log('getPublicApi() saga started');\r\n    const data: any = yield call(api.get, '/api/test/public');\r\n\r\n    // console.log('data:');\r\n    // console.log(typeof data);\r\n    // console.log(data);\r\n    const json = data.data;\r\n    // console.log('json:');\r\n    // console.log(json);\r\n\r\n    if (data && !data.err && data.status === 200) {\r\n      yield put(publicApiSuccess(json));\r\n    } else {\r\n      yield put(publicApiFailure(json));\r\n    }\r\n  } catch (err) {\r\n    // console.log('error occured');\r\n  }\r\n  // console.log('getPublicApi() saga finsshed');\r\n}\r\n\r\nexport function* echoApi(\r\n  action: ReturnType<typeof echoApiStart>\r\n): Generator<CallEffect | PutEffect, void, unknown> {\r\n  try {\r\n    // console.log('echoApi() saga started');\r\n    const { msg } = action.payload;\r\n    const data: any = yield call(api.post, '/api/test/echo', { msg });\r\n    const json = data.data;\r\n\r\n    if (data && !data.err && data.status === 200) {\r\n      yield put(echoApiSuccess(json));\r\n    } else {\r\n      yield put(echoApiFailure(json));\r\n    }\r\n  } catch (err) {\r\n    // console.log('error occured');\r\n  }\r\n  // console.log('getPublicApi() saga finsshed');\r\n}\r\n\r\nexport function* protectedApiStartSaga(): Generator<\r\n  ForkEffect<never>,\r\n  void,\r\n  unknown\r\n> {\r\n  yield takeLatest(protectedApiStart.type, getProtectedApi);\r\n}\r\n\r\nexport function* protectedApiCheckProfileStartSaga(): Generator<\r\n  ForkEffect<never>,\r\n  void,\r\n  unknown\r\n> {\r\n  yield takeLatest(\r\n    protectedApiCheckProfileStart.type,\r\n    getProtectedApiCheckProfile\r\n  );\r\n}\r\n\r\nexport function* publicApiStartSaga(): Generator<\r\n  ForkEffect<never>,\r\n  void,\r\n  unknown\r\n> {\r\n  yield takeLatest(publicApiStart.type, getPublicApi);\r\n}\r\n\r\nexport function* echoApiStartSaga(): Generator<\r\n  ForkEffect<never>,\r\n  void,\r\n  unknown\r\n> {\r\n  yield takeLatest(echoApiStart.type, echoApi);\r\n}\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\currency-conversion\\currency-conversion.sagas.ts",["320","321"],"import {\r\n  takeLatest,\r\n  put,\r\n  call,\r\n  PutEffect,\r\n  CallEffect,\r\n  ForkEffect,\r\n} from 'redux-saga/effects';\r\n\r\nimport {\r\n  CurrencyConversionRequest,\r\n  CurrencyConversionActionTypes,\r\n} from './currency-conversion.types';\r\nimport {\r\n  currencyConversionSuccess,\r\n  currencyConversionFailure,\r\n} from './currency-conversion.actions';\r\n\r\nimport { api } from '../../utils/api';\r\n\r\nexport function* currencyConversion({\r\n  payload,\r\n}: {\r\n  type: CurrencyConversionActionTypes.CURRENCY_CONVERSION_REQUEST;\r\n  payload: CurrencyConversionRequest;\r\n}): Generator<\r\n  PutEffect | CallEffect | string | HTMLAnchorElement,\r\n  void,\r\n  unknown\r\n> {\r\n  // const { tenant, formData } = payload;\r\n  const { formData } = payload;\r\n  // export function* currencyConversion({payload : { tenant, formData }}) {\r\n  console.log('Currency conversion saga started');\r\n  try {\r\n    const response: any = yield call(\r\n      api.post,\r\n      // '/' + tenant + '/api/calc/convert',\r\n      '/api/calc/convert',\r\n      formData\r\n    );\r\n    // yield console.log(response);\r\n    const json: any = yield response.data;\r\n    console.log(json);\r\n    yield put(currencyConversionSuccess(json));\r\n  } catch (error) {\r\n    yield put(currencyConversionFailure(error));\r\n  }\r\n}\r\n\r\nexport function* currencyConversionStart(): Generator<\r\n  ForkEffect<never>,\r\n  void,\r\n  unknown\r\n> {\r\n  yield takeLatest(\r\n    CurrencyConversionActionTypes.CURRENCY_CONVERSION_REQUEST,\r\n    currencyConversion\r\n  );\r\n}\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\report\\report.sagas.ts",["322","323"],"import {\r\n  takeLatest,\r\n  put,\r\n  call,\r\n  ForkEffect,\r\n  CallEffect,\r\n  PutEffect,\r\n} from 'redux-saga/effects';\r\n\r\nimport { ReportRequest, ReportActionTypes } from './report.types';\r\nimport { reportSuccess, reportFailure } from './report.actions';\r\n\r\nimport { api } from '../../utils/api';\r\n\r\nexport function* Report({\r\n  payload,\r\n}: {\r\n  type: ReportActionTypes.REPORT_REQUEST;\r\n  payload: ReportRequest;\r\n}): Generator<ForkEffect | CallEffect | PutEffect, void, unknown> {\r\n  // const { tenant, formData } = payload;\r\n  const { formData } = payload;\r\n  console.log('Report saga started');\r\n  try {\r\n    const response: any = yield call(\r\n      api.post,\r\n      // '/' + tenant + '/api/report/query',\r\n      '/api/report/query',\r\n      formData\r\n    );\r\n    // yield console.log(response);\r\n    const json: any = yield response.data;\r\n    console.log('json object:');\r\n    console.log(json);\r\n    yield put(reportSuccess(json));\r\n  } catch (error) {\r\n    yield put(reportFailure(error));\r\n  }\r\n  // yield console.log('userLoginStart Saga fired');\r\n}\r\n\r\nexport function* ReportStart(): Generator<ForkEffect, void, unknown> {\r\n  yield takeLatest(ReportActionTypes.REPORT_REQUEST, Report);\r\n}\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\currency-conversion\\currency-conversion.reducer.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\report\\report.reducer.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\cash-flow\\cash-flow.sagas.ts",["324","325","326"],"import {\r\n  takeLatest,\r\n  put,\r\n  call,\r\n  ForkEffect,\r\n  PutEffect,\r\n  CallEffect,\r\n} from 'redux-saga/effects';\r\n\r\nimport { CashFlowRequest, CashFlowActionTypes } from './cash-flow.types';\r\nimport { cashFlowSuccess, cashFlowFailure } from './cash-flow.actions';\r\n\r\nimport { api } from '../../utils/api';\r\n\r\nexport function* CashFlow({\r\n  payload,\r\n}: {\r\n  type: CashFlowActionTypes.CASH_FLOW_REQUEST;\r\n  payload: CashFlowRequest;\r\n}): Generator<\r\n  PutEffect | CallEffect | string | HTMLAnchorElement,\r\n  void,\r\n  unknown\r\n> {\r\n  // const { tenant, formData, output } = payload;\r\n  const { formData, output } = payload;\r\n  console.log('CashFlow saga started');\r\n  if (output === 'html') {\r\n    try {\r\n      const response: any = yield call(\r\n        api.post,\r\n        // '/' + tenant + '/api/calc/visual-cash-flow',\r\n        '/api/calc/visual-cash-flow',\r\n        formData\r\n      );\r\n      // yield console.log(response);\r\n      const json = response.data;\r\n      console.log('json object:');\r\n      console.log(json);\r\n      yield put(cashFlowSuccess(json));\r\n    } catch (error) {\r\n      yield put(cashFlowFailure(error));\r\n    }\r\n  } else {\r\n    try {\r\n      console.log('excel object:');\r\n      api.defaults.responseType = 'blob';\r\n      const response: any = yield call(\r\n        api.post,\r\n        // '/' + tenant + '/api/calc/visual-cash-flow-excel',\r\n        '/api/calc/visual-cash-flow-excel',\r\n        formData\r\n      );\r\n      console.log('response received:');\r\n      // 1. Read blob from data\r\n      const blob = response.data;\r\n      // 2. Create blob link to download\r\n      const url = yield window.URL.createObjectURL(new Blob([blob]));\r\n      const link: any = yield document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', `sample.xlsx`);\r\n      // 3. Append to html page\r\n      document.body.appendChild(link);\r\n      // 4. Force download\r\n      link.click();\r\n      // 5. Clean up and remove the link\r\n      link.parentNode.removeChild(link);\r\n      // yield console.log(response);\r\n      const json = response.data;\r\n      console.log('json object:');\r\n      console.log(json);\r\n      yield put(cashFlowSuccess(json));\r\n    } catch (error) {\r\n      yield put(cashFlowFailure(error));\r\n    }\r\n  }\r\n\r\n  // yield console.log('userLoginStart Saga fired');\r\n}\r\n\r\nexport function* CashFlowStart(): Generator<ForkEffect<never>, void, unknown> {\r\n  yield takeLatest(CashFlowActionTypes.CASH_FLOW_REQUEST, CashFlow);\r\n}\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\cash-flow\\cash-flow.reducer.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal-confirm\\modal-confirm.reducer.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\user\\user.types.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal\\modal.types.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\tenant\\tenant.selectors.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\general\\general.selectors.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\features\\modal-blocking\\modal-blocking.selectors.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal-confirm\\modal-confirm.selectors.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\report\\report.selectors.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal\\modal.selectors.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\report\\report.actions.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\features\\modal-blocking\\modal-blocking-dialog.components.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-confirm-dialog\\modal-confirm-dialog.components.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-dialog\\modal-dialog-standard.components.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-dialog\\modal-dialog-simple.components.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\modal-dialog\\modal-dialog-info.components.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\navbar\\RightMenu.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\navbar\\LeftMenu.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\test-form\\test-form.components.tsx",["327"],"import { Form, Input, Button, Select } from 'antd';\r\nimport { FormInstance } from 'antd/lib/form';\r\nimport React, { createRef } from 'react';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nconst TestForm = (): JSX.Element => {\r\n  const formRef = createRef<FormInstance>();\r\n\r\n  const onGenderChange = (value: any) => {\r\n    if (formRef.current !== null) {\r\n      switch (value) {\r\n        case 'male':\r\n          formRef.current.setFieldsValue({ note: 'Hi, man!' });\r\n          return;\r\n        case 'female':\r\n          formRef.current.setFieldsValue({ note: 'Hi, lady!' });\r\n          return;\r\n        case 'other':\r\n          formRef.current.setFieldsValue({ note: 'Hi there!' });\r\n          return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const onFinish = (values: unknown): void => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onReset = (): void => {\r\n    if (formRef.current !== null) {\r\n      formRef.current.resetFields();\r\n    }\r\n  };\r\n\r\n  const onFill = (): void => {\r\n    if (formRef.current !== null) {\r\n      formRef.current.setFieldsValue({\r\n        note: 'Hello world!',\r\n        gender: 'male',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form {...layout} ref={formRef} name=\"control-ref\" onFinish={onFinish}>\r\n      <Form.Item name=\"note\" label=\"Note\" rules={[{ required: true }]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item name=\"gender\" label=\"Gender\" rules={[{ required: true }]}>\r\n        <Select\r\n          placeholder=\"Select a option and change input text above\"\r\n          onChange={onGenderChange}\r\n          allowClear\r\n        >\r\n          <Option value=\"male\">male</Option>\r\n          <Option value=\"female\">female</Option>\r\n          <Option value=\"other\">other</Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item\r\n        noStyle\r\n        shouldUpdate={(prevValues, currentValues) =>\r\n          prevValues.gender !== currentValues.gender\r\n        }\r\n      >\r\n        {({ getFieldValue }) => {\r\n          return getFieldValue('gender') === 'other' ? (\r\n            <Form.Item\r\n              name=\"customizeGender\"\r\n              label=\"Customize Gender\"\r\n              rules={[{ required: true }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n          ) : null;\r\n        }}\r\n      </Form.Item>\r\n      <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n        <Button htmlType=\"button\" onClick={onReset}>\r\n          Reset\r\n        </Button>\r\n        <Button type=\"link\" htmlType=\"button\" onClick={onFill}>\r\n          Fill form\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default TestForm;\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\reset-password\\reset-password.component.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\templates\\template-class-connected-props.components.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\sign-in\\sign-in.components.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\create-tenant\\create-tenant.component.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\components\\dropdown-container\\dropdown-container.component.tsx",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\features\\modal-blocking\\modal-blocking.sagas.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal-confirm\\modal-confirm-sagas.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\utils\\utils.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\utils\\api.ts",["328"],"import axios from 'axios';\r\nimport store from '../redux/store';\r\n\r\nimport {\r\n  refreshTokenRequest,\r\n  refreshTokenSuccess,\r\n  logout,\r\n} from '../redux/user/user.actions';\r\n\r\nexport const api = axios.create({\r\n  baseURL: '',\r\n  responseType: 'json',\r\n});\r\n\r\nexport const api_refresh = axios.create({\r\n  baseURL: '',\r\n  responseType: 'json',\r\n});\r\n\r\n// declare a request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // perform a task before the request is sent\r\n    // console.log('Request was sent');\r\n    const { user } = store.getState();\r\n    // console.log('api interceptor: accessToken: ' + user.accessToken);\r\n    if (user.accessToken !== '') {\r\n      config.headers.Authorization = 'Bearer ' + user.accessToken;\r\n    }\r\n\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // handle the error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 401 retry based on:\r\n// https://stackoverflow.com/questions/51563821/axios-interceptors-retry-original-request-and-access-original-promise\r\n\r\nfunction refreshToken(): Promise<boolean> {\r\n  // console.log('refeshToken function started');\r\n  // get user sub-store\r\n  const { user } = store.getState();\r\n  // console.log('refreshToken: user: ' + user.currentUser);\r\n  if (user.isRefreshing && user.currentUser !== '') {\r\n    return user.refreshingCall;\r\n  }\r\n\r\n  store.dispatch(refreshTokenRequest({ msg: '' }));\r\n\r\n  const headers = {\r\n    Authorization: 'Bearer ' + user.refreshToken,\r\n  };\r\n  const refreshingCall = api_refresh\r\n    .post('/' + user.tenant + '/api/auth/refresh', null, { headers: headers })\r\n    .then(({ data: { access_token: token } }) => {\r\n      store.dispatch(refreshTokenSuccess({ accessToken: token }));\r\n      return Promise.resolve(true);\r\n    })\r\n    .catch(() => {\r\n      // store.dispatch(logout({ tenant: user.tenant }));\r\n      store.dispatch(logout());\r\n      return Promise.resolve(false);\r\n    });\r\n  return refreshingCall;\r\n}\r\n\r\n// declare a response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    // do something with the response data\r\n    // console.log('Response was received');\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // console.log('Response was received, error occured');\r\n    // handle the response error 401 or 500\r\n    if (error.response.status === 401 || error.response.status === 500) {\r\n      // console.log('error code is 401');\r\n      // console.log(error.response);\r\n\r\n      const { user } = store.getState();\r\n      if (user.currentUser === '') {\r\n        // TODO - error not working\r\n        // return { msg: 'error' };\r\n        return error.response;\r\n      } else {\r\n        return refreshToken().then((_) => {\r\n          const { user } = store.getState();\r\n          // console.log('access token: ' + user.accessToken);\r\n          error.config.headers['Authorization'] = 'Bearer ' + user.accessToken;\r\n          error.config.baseURL = undefined;\r\n          // return api_refresh.request(error.config);\r\n          try {\r\n            const response = api_refresh.request(error.config);\r\n            return response;\r\n          } catch (err) {\r\n            console.log('refresh token error occured');\r\n            return err.response;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    // Return message and not error to component\r\n    return error.response;\r\n  }\r\n);\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal-confirm\\modal-confirm.types.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\cash-flow\\cash-flow.types.ts",["329","330"],"export interface CashFlowState {\r\n  selection: string;\r\n  is_running: boolean;\r\n  is_succesfull: boolean;\r\n  status_text: string;\r\n  data: any[];\r\n  data_html: string;\r\n  // info: {};\r\n  // info: Record<string, unknown>;\r\n  info: string;\r\n}\r\n\r\nexport interface CashFlowMessage {\r\n  msg: string;\r\n}\r\n\r\nexport interface CashFlowSetting {\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\nexport interface CashFlowRequest {\r\n  tenant: string;\r\n  formData: FormData;\r\n  output: string;\r\n}\r\n\r\nexport interface CashFlowResponse {\r\n  report: string;\r\n  data: any[];\r\n  data_html: string;\r\n  info: string;\r\n}\r\n\r\nexport enum CashFlowActionTypes {\r\n  SAVE_CASH_FLOW_SETTINGS = 'SAVE_CASH_FLOW_SETTINGS',\r\n  CASH_FLOW_REQUEST = 'CASH_FLOW_REQUEST',\r\n  CASH_FLOW_SUCCESS = 'CASH_FLOW_SUCCESS',\r\n  CASH_FLOW_FAILURE = 'CASH_FLOW_FAILURE',\r\n}\r\n\r\nexport interface saveCashFlowAction {\r\n  type: CashFlowActionTypes.SAVE_CASH_FLOW_SETTINGS;\r\n  payload: CashFlowSetting;\r\n}\r\n\r\nexport interface reportRequestAction {\r\n  type: CashFlowActionTypes.CASH_FLOW_REQUEST;\r\n  payload: CashFlowRequest;\r\n}\r\n\r\nexport interface reportSuccessAction {\r\n  type: CashFlowActionTypes.CASH_FLOW_SUCCESS;\r\n  payload: CashFlowResponse;\r\n}\r\n\r\nexport interface reportFailureAction {\r\n  type: CashFlowActionTypes.CASH_FLOW_FAILURE;\r\n  payload: CashFlowMessage;\r\n}\r\n\r\nexport type CashFlowAction =\r\n  | saveCashFlowAction\r\n  | reportRequestAction\r\n  | reportSuccessAction\r\n  | reportFailureAction;\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\cash-flow\\cash-flow.actions.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\report\\report.types.ts",["331","332"],"export interface ReportState {\r\n  selection: string;\r\n  is_running: boolean;\r\n  is_succesfull: boolean;\r\n  status_text: string;\r\n  report_data: any[];\r\n  // report_info: {};\r\n  // report_info: Record<string, unknown>;\r\n  report_info: string;\r\n}\r\n\r\nexport interface ReportMessage {\r\n  msg: string;\r\n}\r\n\r\nexport interface ReportSetting {\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\nexport interface ReportRequest {\r\n  tenant: string;\r\n  formData: FormData;\r\n}\r\n\r\nexport interface ReportResponse {\r\n  report: any[];\r\n  report_info: string;\r\n}\r\n\r\nexport enum ReportActionTypes {\r\n  SAVE_REPORT_SETTINGS = 'SAVE_REPORT_SETTINGS',\r\n  REPORT_REQUEST = 'REPORT_REQUEST',\r\n  REPORT_SUCCESS = 'REPORT_SUCCESS',\r\n  REPORT_FAILURE = 'REPORT_FAILURE',\r\n}\r\n\r\nexport interface saveReportAction {\r\n  type: ReportActionTypes.SAVE_REPORT_SETTINGS;\r\n  payload: ReportSetting;\r\n}\r\n\r\nexport interface reportRequestAction {\r\n  type: ReportActionTypes.REPORT_REQUEST;\r\n  payload: ReportRequest;\r\n}\r\n\r\nexport interface reportSuccessAction {\r\n  type: ReportActionTypes.REPORT_SUCCESS;\r\n  payload: ReportResponse;\r\n}\r\n\r\nexport interface reportFailureAction {\r\n  type: ReportActionTypes.REPORT_FAILURE;\r\n  payload: ReportMessage;\r\n}\r\n\r\nexport type ReportAction =\r\n  | saveReportAction\r\n  | reportRequestAction\r\n  | reportSuccessAction\r\n  | reportFailureAction;\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\currency-conversion\\currency-conversion.types.ts",["333","334"],"export interface CurrencyConversionState {\r\n  measure: string;\r\n  currency: string;\r\n  masterdata: string;\r\n  masterdata_file: File;\r\n  masterdata_filename: string;\r\n  rules: string;\r\n  rules_file: File;\r\n  rules_filename: string;\r\n  rates: string;\r\n  rates_file: File;\r\n  rates_filename: string;\r\n  data: string;\r\n  data_file: File;\r\n  data_filename: string;\r\n  data_selection: string;\r\n  is_running: boolean;\r\n  is_succesfull: boolean;\r\n  status_text: string;\r\n  converted_data: any[];\r\n}\r\n\r\nexport interface CurrencyConversionMessage {\r\n  msg: string;\r\n}\r\n\r\nexport interface CurrencyConversionRequest {\r\n  tenant: string;\r\n  formData: FormData;\r\n}\r\n\r\nexport interface CurrencyConversionSetting {\r\n  name: string;\r\n  filename: string;\r\n  value: File;\r\n}\r\n\r\nexport interface CurrencyConversionResponse {\r\n  tableData: any[];\r\n}\r\n\r\nexport enum CurrencyConversionActionTypes {\r\n  SAVE_CURRENCY_CONVERSION_SETTINGS = 'SAVE_CURRENCY_CONVERSION_SETTINGS',\r\n  CURRENCY_CONVERSION_REQUEST = 'CURRENCY_CONVERSION_REQUEST',\r\n  CURRENCY_CONVERSION_SUCCESS = 'CURRENCY_CONVERSION_SUCCESS',\r\n  CURRENCY_CONVERSION_FAILURE = 'CURRENCY_CONVERSION_FAILURE',\r\n}\r\n\r\nexport interface saveCurrencyConversionSettingsAction {\r\n  type: CurrencyConversionActionTypes.SAVE_CURRENCY_CONVERSION_SETTINGS;\r\n  payload: CurrencyConversionSetting;\r\n}\r\n\r\nexport interface currencyConversionRequestAction {\r\n  type: CurrencyConversionActionTypes.CURRENCY_CONVERSION_REQUEST;\r\n  payload: CurrencyConversionRequest;\r\n}\r\n\r\nexport interface currencyConversionSuccessAction {\r\n  type: CurrencyConversionActionTypes.CURRENCY_CONVERSION_SUCCESS;\r\n  payload: CurrencyConversionResponse;\r\n}\r\n\r\nexport interface currencyConversionFailureAction {\r\n  type: CurrencyConversionActionTypes.CURRENCY_CONVERSION_FAILURE;\r\n  payload: CurrencyConversionMessage;\r\n}\r\n\r\nexport type CurrencyConversionAction =\r\n  | saveCurrencyConversionSettingsAction\r\n  | currencyConversionRequestAction\r\n  | currencyConversionSuccessAction\r\n  | currencyConversionFailureAction;\r\n","C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\currency-conversion\\currency-conversion.actions.ts",[],"C:\\Dev\\k8s-simple-fullstack\\frontend\\src\\redux\\modal-confirm\\modal-confirm.actions.ts",[],[],{"ruleId":"335","severity":1,"message":"336","line":57,"column":21,"nodeType":"337","messageId":"338","endLine":57,"endColumn":24,"suggestions":"339"},{"ruleId":"335","severity":1,"message":"336","line":98,"column":21,"nodeType":"337","messageId":"338","endLine":98,"endColumn":24,"suggestions":"340"},{"ruleId":"335","severity":1,"message":"336","line":149,"column":21,"nodeType":"337","messageId":"338","endLine":149,"endColumn":24,"suggestions":"341"},{"ruleId":"335","severity":1,"message":"336","line":202,"column":21,"nodeType":"337","messageId":"338","endLine":202,"endColumn":24,"suggestions":"342"},{"ruleId":"335","severity":1,"message":"336","line":59,"column":23,"nodeType":"337","messageId":"338","endLine":59,"endColumn":26,"suggestions":"343"},{"ruleId":"335","severity":1,"message":"336","line":114,"column":23,"nodeType":"337","messageId":"338","endLine":114,"endColumn":26,"suggestions":"344"},{"ruleId":"335","severity":1,"message":"336","line":156,"column":21,"nodeType":"337","messageId":"338","endLine":156,"endColumn":24,"suggestions":"345"},{"ruleId":"335","severity":1,"message":"336","line":187,"column":21,"nodeType":"337","messageId":"338","endLine":187,"endColumn":24,"suggestions":"346"},{"ruleId":"335","severity":1,"message":"336","line":40,"column":17,"nodeType":"337","messageId":"338","endLine":40,"endColumn":20,"suggestions":"347"},{"ruleId":"335","severity":1,"message":"336","line":69,"column":17,"nodeType":"337","messageId":"338","endLine":69,"endColumn":20,"suggestions":"348"},{"ruleId":"335","severity":1,"message":"336","line":120,"column":17,"nodeType":"337","messageId":"338","endLine":120,"endColumn":20,"suggestions":"349"},{"ruleId":"335","severity":1,"message":"336","line":146,"column":17,"nodeType":"337","messageId":"338","endLine":146,"endColumn":20,"suggestions":"350"},{"ruleId":"335","severity":1,"message":"336","line":36,"column":21,"nodeType":"337","messageId":"338","endLine":36,"endColumn":24,"suggestions":"351"},{"ruleId":"335","severity":1,"message":"336","line":43,"column":17,"nodeType":"337","messageId":"338","endLine":43,"endColumn":20,"suggestions":"352"},{"ruleId":"335","severity":1,"message":"336","line":25,"column":21,"nodeType":"337","messageId":"338","endLine":25,"endColumn":24,"suggestions":"353"},{"ruleId":"335","severity":1,"message":"336","line":32,"column":17,"nodeType":"337","messageId":"338","endLine":32,"endColumn":20,"suggestions":"354"},{"ruleId":"335","severity":1,"message":"336","line":30,"column":23,"nodeType":"337","messageId":"338","endLine":30,"endColumn":26,"suggestions":"355"},{"ruleId":"335","severity":1,"message":"336","line":48,"column":23,"nodeType":"337","messageId":"338","endLine":48,"endColumn":26,"suggestions":"356"},{"ruleId":"335","severity":1,"message":"336","line":59,"column":19,"nodeType":"337","messageId":"338","endLine":59,"endColumn":22,"suggestions":"357"},{"ruleId":"335","severity":1,"message":"336","line":18,"column":34,"nodeType":"337","messageId":"338","endLine":18,"endColumn":37,"suggestions":"358"},{"ruleId":"359","severity":1,"message":"360","line":90,"column":37,"nodeType":"361","messageId":"362","endLine":90,"endColumn":38},{"ruleId":"335","severity":1,"message":"336","line":6,"column":9,"nodeType":"337","messageId":"338","endLine":6,"endColumn":12,"suggestions":"363"},{"ruleId":"335","severity":1,"message":"336","line":30,"column":9,"nodeType":"337","messageId":"338","endLine":30,"endColumn":12,"suggestions":"364"},{"ruleId":"335","severity":1,"message":"336","line":6,"column":16,"nodeType":"337","messageId":"338","endLine":6,"endColumn":19,"suggestions":"365"},{"ruleId":"335","severity":1,"message":"336","line":27,"column":11,"nodeType":"337","messageId":"338","endLine":27,"endColumn":14,"suggestions":"366"},{"ruleId":"335","severity":1,"message":"336","line":20,"column":19,"nodeType":"337","messageId":"338","endLine":20,"endColumn":22,"suggestions":"367"},{"ruleId":"335","severity":1,"message":"336","line":39,"column":14,"nodeType":"337","messageId":"338","endLine":39,"endColumn":17,"suggestions":"368"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["369","370"],["371","372"],["373","374"],["375","376"],["377","378"],["379","380"],["381","382"],["383","384"],["385","386"],["387","388"],["389","390"],["391","392"],["393","394"],["395","396"],["397","398"],["399","400"],["401","402"],["403","404"],["405","406"],["407","408"],"@typescript-eslint/no-unused-vars","'_' is defined but never used.","Identifier","unusedVar",["409","410"],["411","412"],["413","414"],["415","416"],["417","418"],["419","420"],{"messageId":"421","fix":"422","desc":"423"},{"messageId":"424","fix":"425","desc":"426"},{"messageId":"421","fix":"427","desc":"423"},{"messageId":"424","fix":"428","desc":"426"},{"messageId":"421","fix":"429","desc":"423"},{"messageId":"424","fix":"430","desc":"426"},{"messageId":"421","fix":"431","desc":"423"},{"messageId":"424","fix":"432","desc":"426"},{"messageId":"421","fix":"433","desc":"423"},{"messageId":"424","fix":"434","desc":"426"},{"messageId":"421","fix":"435","desc":"423"},{"messageId":"424","fix":"436","desc":"426"},{"messageId":"421","fix":"437","desc":"423"},{"messageId":"424","fix":"438","desc":"426"},{"messageId":"421","fix":"439","desc":"423"},{"messageId":"424","fix":"440","desc":"426"},{"messageId":"421","fix":"441","desc":"423"},{"messageId":"424","fix":"442","desc":"426"},{"messageId":"421","fix":"443","desc":"423"},{"messageId":"424","fix":"444","desc":"426"},{"messageId":"421","fix":"445","desc":"423"},{"messageId":"424","fix":"446","desc":"426"},{"messageId":"421","fix":"447","desc":"423"},{"messageId":"424","fix":"448","desc":"426"},{"messageId":"421","fix":"449","desc":"423"},{"messageId":"424","fix":"450","desc":"426"},{"messageId":"421","fix":"451","desc":"423"},{"messageId":"424","fix":"452","desc":"426"},{"messageId":"421","fix":"453","desc":"423"},{"messageId":"424","fix":"454","desc":"426"},{"messageId":"421","fix":"455","desc":"423"},{"messageId":"424","fix":"456","desc":"426"},{"messageId":"421","fix":"457","desc":"423"},{"messageId":"424","fix":"458","desc":"426"},{"messageId":"421","fix":"459","desc":"423"},{"messageId":"424","fix":"460","desc":"426"},{"messageId":"421","fix":"461","desc":"423"},{"messageId":"424","fix":"462","desc":"426"},{"messageId":"421","fix":"463","desc":"423"},{"messageId":"424","fix":"464","desc":"426"},{"messageId":"421","fix":"465","desc":"423"},{"messageId":"424","fix":"466","desc":"426"},{"messageId":"421","fix":"467","desc":"423"},{"messageId":"424","fix":"468","desc":"426"},{"messageId":"421","fix":"469","desc":"423"},{"messageId":"424","fix":"470","desc":"426"},{"messageId":"421","fix":"471","desc":"423"},{"messageId":"424","fix":"472","desc":"426"},{"messageId":"421","fix":"473","desc":"423"},{"messageId":"424","fix":"474","desc":"426"},{"messageId":"421","fix":"475","desc":"423"},{"messageId":"424","fix":"476","desc":"426"},"suggestUnknown",{"range":"477","text":"478"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"477","text":"479"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"480","text":"478"},{"range":"480","text":"479"},{"range":"481","text":"478"},{"range":"481","text":"479"},{"range":"482","text":"478"},{"range":"482","text":"479"},{"range":"483","text":"478"},{"range":"483","text":"479"},{"range":"484","text":"478"},{"range":"484","text":"479"},{"range":"485","text":"478"},{"range":"485","text":"479"},{"range":"486","text":"478"},{"range":"486","text":"479"},{"range":"487","text":"478"},{"range":"487","text":"479"},{"range":"488","text":"478"},{"range":"488","text":"479"},{"range":"489","text":"478"},{"range":"489","text":"479"},{"range":"490","text":"478"},{"range":"490","text":"479"},{"range":"491","text":"478"},{"range":"491","text":"479"},{"range":"492","text":"478"},{"range":"492","text":"479"},{"range":"493","text":"478"},{"range":"493","text":"479"},{"range":"494","text":"478"},{"range":"494","text":"479"},{"range":"495","text":"478"},{"range":"495","text":"479"},{"range":"496","text":"478"},{"range":"496","text":"479"},{"range":"497","text":"478"},{"range":"497","text":"479"},{"range":"498","text":"478"},{"range":"498","text":"479"},{"range":"499","text":"478"},{"range":"499","text":"479"},{"range":"500","text":"478"},{"range":"500","text":"479"},{"range":"501","text":"478"},{"range":"501","text":"479"},{"range":"502","text":"478"},{"range":"502","text":"479"},{"range":"503","text":"478"},{"range":"503","text":"479"},{"range":"504","text":"478"},{"range":"504","text":"479"},[1474,1477],"unknown","never",[2701,2704],[4249,4252],[5892,5895],[1780,1783],[3385,3388],[4540,4543],[5325,5328],[883,886],[1911,1914],[3447,3450],[4186,4189],[883,886],[1070,1073],[625,628],[812,815],[726,729],[1262,1265],[1677,1680],[440,443],[139,142],[543,546],[144,147],[503,506],[481,484],[819,822]]